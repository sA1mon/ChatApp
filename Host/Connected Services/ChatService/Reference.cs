//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Host.ChatService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublicKey", Namespace="http://schemas.datacontract.org/2004/07/Rsa")]
    [System.SerializableAttribute()]
    public partial class PublicKey : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private Host.ChatService.BigInteger Ek__BackingFieldField;
        
        private Host.ChatService.BigInteger Nk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<E>k__BackingField", IsRequired=true)]
        public Host.ChatService.BigInteger Ek__BackingField {
            get {
                return this.Ek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Ek__BackingFieldField, value) != true)) {
                    this.Ek__BackingFieldField = value;
                    this.RaisePropertyChanged("Ek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<N>k__BackingField", IsRequired=true)]
        public Host.ChatService.BigInteger Nk__BackingField {
            get {
                return this.Nk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Nk__BackingFieldField, value) != true)) {
                    this.Nk__BackingFieldField = value;
                    this.RaisePropertyChanged("Nk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BigInteger", Namespace="http://schemas.datacontract.org/2004/07/Org.BouncyCastle.Math")]
    [System.SerializableAttribute()]
    public partial class BigInteger : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int mQuoteField;
        
        private int[] magnitudeField;
        
        private int nBitLengthField;
        
        private int nBitsField;
        
        private int signField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int mQuote {
            get {
                return this.mQuoteField;
            }
            set {
                if ((this.mQuoteField.Equals(value) != true)) {
                    this.mQuoteField = value;
                    this.RaisePropertyChanged("mQuote");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int[] magnitude {
            get {
                return this.magnitudeField;
            }
            set {
                if ((object.ReferenceEquals(this.magnitudeField, value) != true)) {
                    this.magnitudeField = value;
                    this.RaisePropertyChanged("magnitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int nBitLength {
            get {
                return this.nBitLengthField;
            }
            set {
                if ((this.nBitLengthField.Equals(value) != true)) {
                    this.nBitLengthField = value;
                    this.RaisePropertyChanged("nBitLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int nBits {
            get {
                return this.nBitsField;
            }
            set {
                if ((this.nBitsField.Equals(value) != true)) {
                    this.nBitsField = value;
                    this.RaisePropertyChanged("nBits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int sign {
            get {
                return this.signField;
            }
            set {
                if ((this.signField.Equals(value) != true)) {
                    this.signField = value;
                    this.RaisePropertyChanged("sign");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatService.IChat", CallbackContract=typeof(Host.ChatService.IChatCallback))]
    public interface IChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Add", ReplyAction="http://tempuri.org/IChat/AddResponse")]
        ChatApp.User Add(string name, string hardSerial, Host.ChatService.PublicKey key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Add", ReplyAction="http://tempuri.org/IChat/AddResponse")]
        System.Threading.Tasks.Task<ChatApp.User> AddAsync(string name, string hardSerial, Host.ChatService.PublicKey key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Remove", ReplyAction="http://tempuri.org/IChat/RemoveResponse")]
        void Remove(ChatApp.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Remove", ReplyAction="http://tempuri.org/IChat/RemoveResponse")]
        System.Threading.Tasks.Task RemoveAsync(ChatApp.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/GetUsers", ReplyAction="http://tempuri.org/IChat/GetUsersResponse")]
        ChatApp.User[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/GetUsers", ReplyAction="http://tempuri.org/IChat/GetUsersResponse")]
        System.Threading.Tasks.Task<ChatApp.User[]> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/SendMessage")]
        void SendMessage(byte[] msg, ChatApp.User sender, ChatApp.User receiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(byte[] msg, ChatApp.User sender, ChatApp.User receiver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Shutdown", ReplyAction="http://tempuri.org/IChat/ShutdownResponse")]
        void Shutdown();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Shutdown", ReplyAction="http://tempuri.org/IChat/ShutdownResponse")]
        System.Threading.Tasks.Task ShutdownAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Ban", ReplyAction="http://tempuri.org/IChat/BanResponse")]
        bool Ban(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Ban", ReplyAction="http://tempuri.org/IChat/BanResponse")]
        System.Threading.Tasks.Task<bool> BanAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Unban", ReplyAction="http://tempuri.org/IChat/UnbanResponse")]
        bool Unban(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Unban", ReplyAction="http://tempuri.org/IChat/UnbanResponse")]
        System.Threading.Tasks.Task<bool> UnbanAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/GetMessage")]
        void GetMessage(byte[] message, string senderName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatChannel : Host.ChatService.IChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatClient : System.ServiceModel.DuplexClientBase<Host.ChatService.IChat>, Host.ChatService.IChat {
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public ChatApp.User Add(string name, string hardSerial, Host.ChatService.PublicKey key) {
            return base.Channel.Add(name, hardSerial, key);
        }
        
        public System.Threading.Tasks.Task<ChatApp.User> AddAsync(string name, string hardSerial, Host.ChatService.PublicKey key) {
            return base.Channel.AddAsync(name, hardSerial, key);
        }
        
        public void Remove(ChatApp.User user) {
            base.Channel.Remove(user);
        }
        
        public System.Threading.Tasks.Task RemoveAsync(ChatApp.User user) {
            return base.Channel.RemoveAsync(user);
        }
        
        public ChatApp.User[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<ChatApp.User[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public void SendMessage(byte[] msg, ChatApp.User sender, ChatApp.User receiver) {
            base.Channel.SendMessage(msg, sender, receiver);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(byte[] msg, ChatApp.User sender, ChatApp.User receiver) {
            return base.Channel.SendMessageAsync(msg, sender, receiver);
        }
        
        public void Shutdown() {
            base.Channel.Shutdown();
        }
        
        public System.Threading.Tasks.Task ShutdownAsync() {
            return base.Channel.ShutdownAsync();
        }
        
        public bool Ban(string name) {
            return base.Channel.Ban(name);
        }
        
        public System.Threading.Tasks.Task<bool> BanAsync(string name) {
            return base.Channel.BanAsync(name);
        }
        
        public bool Unban(string name) {
            return base.Channel.Unban(name);
        }
        
        public System.Threading.Tasks.Task<bool> UnbanAsync(string name) {
            return base.Channel.UnbanAsync(name);
        }
    }
}
